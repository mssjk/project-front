import { Injectable } from '@angular/core';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

@Injectable({
  providedIn: 'root',
})
export class PdfService {
  constructor() {}

  downloadPDF(
    userName: string,
    userId: number,
    dafBalance: number,
    filteredDonations: any[],
    formatDateTime: (date: any) => string
  ): void {
    const doc = new jsPDF();

    // Add logo in the top-center and expand its width
    const logoUrl = 'assets/logo.png'; // Replace with your logo path
    const imgWidth = 60; // Expanded width
    const imgHeight = 21; // Adjusted height
    const pageWidth = doc.internal.pageSize.width;
    const centerX = (pageWidth - imgWidth) / 2;
    doc.addImage(logoUrl, 'PNG', centerX, 5, imgWidth, imgHeight);
    doc.setFontSize(12);
    doc.setFont('times', 'normal');
    doc.setTextColor(100);
    doc.text('Smart Giving, Measurable Impact', 105, 28, { align: 'center' });

    // Add current date in the top-right corner
    const currentDate = new Date().toLocaleDateString();
    doc.setFontSize(10);
    doc.text(`Date: ${currentDate}`, 200, 10, { align: 'right' });

    // Add user details (name, account number, and balance)
    doc.setFont('times', 'normal'); // Set font to Times New Roman
    doc.setFontSize(12);
    doc.setTextColor(60);
    doc.text(`Name: ${userName}`, 10, 40);
    doc.text(`Account Number: ${userId}`, 105, 40, { align: 'center' });
    doc.setTextColor(40);
    doc.text(
      `Available Balance: INR ${dafBalance.toLocaleString('en-IN')}`, // Format balance with commas
      10,
      50
    );

    // Add centered "Donation Summary" title
    doc.setFontSize(16);
    doc.setTextColor(40);
    doc.setFont('times', 'bold');
    doc.text('Donation Summary', 105, 60, { align: 'center' });

    // Add a horizontal line below the header
    doc.setDrawColor(200);
    doc.line(10, 65, 200, 65);

    // Format table data properly
    const tableData = filteredDonations.map((donation) => [
      donation.donationId,
      donation.charityName,
      `INR ${Number(donation.amount).toLocaleString('en-IN')}`, // Format amount with commas
      formatDateTime(donation.date),
      donation.sector,
    ]);

    autoTable(doc, {
      head: [['Donation ID', 'Charity', 'Amount', 'Date', 'Sector']],
      body: tableData,
      startY: 70,
      theme: 'striped',
      headStyles: {
        fillColor: [0, 92, 150],
        textColor: [255, 255, 255],
        fontSize: 12,
        halign: 'center',
        fontStyle: 'bold',
        font: 'times', // Set table header font to Times New Roman
      },
      bodyStyles: {
        fontSize: 10,
        halign: 'center',
        textColor: [50, 50, 50],
        font: 'times', // Set table body font to Times New Roman
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245],
      },
      margin: { top: 10, left: 10, right: 10 },
      didDrawPage: (data) => {
        // Add page numbers at the bottom
        const pageCount = doc.getNumberOfPages();
        doc.setFontSize(10);
        doc.setTextColor(100);
        doc.text(
          `Page ${pageCount}`,
          105,
          doc.internal.pageSize.height - 10,
          { align: 'center' }
        );
      },
    });

    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text(
      'Generated by Donation Management System',
      105,
      pageHeight - 15,
      { align: 'center' }
    );

    // Save the PDF
    doc.save('Donation_Summary.pdf');
  }
}